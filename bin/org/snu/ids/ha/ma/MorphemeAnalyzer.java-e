/*     */ package org.snu.ids.ha.ma;
/*     */ 
/*     */ import java.io.FileWriter;
/*     */ import java.io.IOException;
/*     */ import java.io.PrintStream;
/*     */ import java.io.PrintWriter;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Collection;
/*     */ import java.util.List;
/*     */ import org.snu.ids.ha.constants.Condition;
/*     */ import org.snu.ids.ha.constants.POSTag;
/*     */ import org.snu.ids.ha.dic.Dictionary;
/*     */ import org.snu.ids.ha.util.Util;
/*     */ 
/*     */ public class MorphemeAnalyzer
/*     */ {
/*  34 */   protected Dictionary dic = null;
/*     */ 
/* 468 */   PrintWriter logger = null;
/* 469 */   boolean doLogging = false;
/*     */ 
/* 526 */   public static final boolean DEBUG = "DO_DEBUG".equals(System.getProperty("DO_DEBUG"));
/*     */ 
/*     */   public MorphemeAnalyzer()
/*     */   {
/*  47 */     this.dic = Dictionary.getInstance();
/*     */   }
/*     */ 
/*     */   public List<MExpression> analyze(String string)
/*     */     throws Exception
/*     */   {
/*  65 */     if (!Util.valid(string)) return null;
/*  66 */     string = string.trim();
/*     */ 
/*  69 */     ArrayList ret = new ArrayList();
/*     */ 
/*  72 */     List tokenList = Tokenizer.tokenize(string);
/*     */ 
/*  75 */     MExpression mePrev = null; MExpression meCur = null;
/*  76 */     int i = 0; for (int stop = tokenList.size(); i < stop; i++) {
/*  77 */       Token token = (Token)tokenList.get(i);
/*  78 */       if (!token.isCharSetOf(CharSetType.SPACE)) {
/*  79 */         List meList = analyze(mePrev, token);
/*     */ 
/*  82 */         int j = 0; for (int jStop = meList.size(); j < jStop; j++) {
/*  83 */           meCur = (MExpression)meList.get(j);
/*  84 */           if (mePrev != null) mePrev.pruneWithNext(meCur);
/*  85 */           ret.add(meCur);
/*  86 */           mePrev = meCur;
/*     */         }
/*     */       }
/*     */     }
/*  90 */     return ret;
/*     */   }
/*     */ 
/*     */   private List<MExpression> analyze(MExpression mePrev, Token token)
/*     */     throws Exception
/*     */   {
/* 108 */     List ret = new ArrayList();
/*     */ 
/* 110 */     if (!token.isCharSetOf(CharSetType.HANGUL)) {
/* 111 */       ret.add(new MExpression(token.string, new MCandidate(token)));
/* 112 */       return ret;
/*     */     }
/*     */ 
/* 117 */     String string = token.string;
/* 118 */     int strlen = string.length();
/* 119 */     MExpression meHeadTemp = null; MExpression meTailTemp = null; MExpression meNew = null;
/*     */ 
/* 121 */     MExpression[] meArr = new MExpression[strlen];
/* 122 */     String substr = null; String tail = null;
/* 123 */     int tailCutPos = 1;
/*     */ 
/* 126 */     int firstOffset = token.index;
/* 127 */     for (; tailCutPos <= strlen; tailCutPos++)
/*     */     {
/* 129 */       substr = string.substring(0, tailCutPos);
/*     */ 
/* 132 */       MExpression meCur = meArr[(tailCutPos - 1)] =  = getMExpression(substr, firstOffset);
/*     */ 
/* 135 */       meCur.pruneWithPrev(mePrev);
/*     */ 
/* 138 */       for (int headCutPos = 1; headCutPos < tailCutPos; headCutPos++) {
/* 139 */         writeLog("==========================================[" + substr + "]");
/* 140 */         tail = substr.substring(headCutPos, tailCutPos);
/* 141 */         meTailTemp = getMExpression(tail, firstOffset + headCutPos);
/* 142 */         meHeadTemp = meArr[(headCutPos - 1)];
/* 143 */         meNew = meHeadTemp.derive(meTailTemp);
/* 144 */         meNew.pruneWithPrev(mePrev);
/* 145 */         writeLog("[     HEAD ] " + meHeadTemp);
/* 146 */         writeLog("[     TAIL ] " + meTailTemp);
/* 147 */         writeLog("[GENERATED ] " + meNew);
/* 148 */         writeLog("[   STORED ] " + meCur);
/* 149 */         meCur.merge(meNew);
/* 150 */         writeLog("[   MERGED ] " + meCur);
/* 151 */         writeLog("==================================================");
/*     */       }
/*     */ 
/* 155 */       if (tailCutPos != strlen)
/*     */       {
/* 158 */         if ((meCur.isComplete()) || (tailCutPos >= 11))
/*     */         {
/* 163 */           if ((strlen > 5) && (meCur.size() > 3) && (tailCutPos > 4))
/*     */           {
/* 165 */             String strHead = meCur.getCommonHead();
/*     */ 
/* 168 */             if (strHead != null)
/*     */             {
/* 170 */               writeLog("[COMMON HEAD]==============" + strHead);
/* 171 */               int headLen = strHead.length();
/* 172 */               String tailStr = meCur.getExp().substring(headLen);
/* 173 */               MExpression[] meHeadTail = meCur.divideHeadTailAt(strHead, firstOffset, tailStr, firstOffset + headLen);
/* 174 */               MExpression headME = meHeadTail[0];
/* 175 */               ret.add(headME);
/* 176 */               mePrev = headME;
/* 177 */               writeLog(ret);
/*     */ 
/* 180 */               MExpression[] newExps = new MExpression[tailCutPos - headLen];
/* 181 */               int k = headLen; for (int l = 0; k < tailCutPos; l++) {
/* 182 */                 meHeadTail = meArr[k].divideHeadTailAt(strHead, token.index, tailStr.substring(0, l + 1), token.index + k);
/* 183 */                 newExps[l] = meHeadTail[1];
/*     */ 
/* 181 */                 k++;
/*     */               }
/*     */ 
/* 187 */               string = string.substring(strHead.length());
/* 188 */               strlen = string.length();
/* 189 */               meArr = new MExpression[strlen];
/* 190 */               tailCutPos = 0;
/*     */ 
/* 193 */               int j = 0; for (int stop = newExps.length; j < stop; j++) {
/* 194 */                 meArr[j] = newExps[j];
/*     */               }
/* 196 */               tailCutPos = tailStr.length();
/*     */ 
/* 199 */               firstOffset += strHead.length();
/*     */             }
/*     */           }
/*     */         }
/*     */       }
/*     */     }
/* 205 */     if (tailCutPos > 1) ret.add(meArr[(meArr.length - 1)]);
/*     */ 
/* 208 */     int i = 0; for (int stop = ret.size(); i < stop; i++) {
/* 209 */       MExpression me = (MExpression)ret.get(i);
/* 210 */       if ((me.size() == 0) || (((MCandidate)me.get(0)).getDicLenOnlyReal() == 0)) {
/* 211 */         me.add(new MCandidate(me.exp, token.index));
/*     */       }
/*     */     }
/*     */ 
/* 215 */     return ret;
/*     */   }
/*     */ 
/*     */   private MExpression getMExpression(String string, int index)
/*     */     throws Exception
/*     */   {
/* 231 */     MExpression ret = this.dic.getMExpression(string);
/* 232 */     if (ret == null) {
/* 233 */       MCandidate mc = new MCandidate(string, index);
/* 234 */       ret = new MExpression(string, mc);
/* 235 */       ret.setLnprOfSpacing(mc.lnprOfSpacing);
/*     */     } else {
/* 237 */       ret.setIndex(index);
/*     */     }
/* 239 */     return ret;
/*     */   }
/*     */ 
/*     */   public List<MExpression> postProcess(List<MExpression> melAnalResult)
/*     */     throws Exception
/*     */   {
/* 257 */     MExpression me1 = null; MExpression me2 = null; MExpression me3 = null;
/* 258 */     for (int i = 1; i < melAnalResult.size(); i++) {
/* 259 */       me1 = (MExpression)melAnalResult.get(i - 1);
/* 260 */       me2 = (MExpression)melAnalResult.get(i);
/* 261 */       if ((!me2.isComplete()) || (me1.isOneEojeolCheckable()) || (me2.isOneEojeolCheckable()))
/*     */       {
/* 264 */         if ((me1.isNotHangul()) && (me2.isNotHangul())) {
/* 265 */           MCandidate mc1 = (MCandidate)me1.get(0); MCandidate mc2 = (MCandidate)me2.get(0);
/*     */ 
/* 268 */           if (mc1.firstMorp.index + mc1.getExp().length() == mc2.firstMorp.index) {
/* 269 */             me1.exp += me2.exp;
/* 270 */             mc1.addAll(mc2);
/* 271 */             mc1.setExp(me1.exp);
/* 272 */             melAnalResult.remove(i);
/* 273 */             i--;
/*     */           }
/*     */ 
/*     */         }
/* 277 */         else if (me1.isNotHangul()) {
/* 278 */           MCandidate mc1 = (MCandidate)me1.get(0); MCandidate mc2 = (MCandidate)me2.get(0);
/*     */ 
/* 281 */           if (mc1.firstMorp.index + mc1.getExp().length() == mc2.firstMorp.index) {
/* 282 */             me3 = me1.derive(me2);
/* 283 */             melAnalResult.remove(i - 1);
/* 284 */             melAnalResult.remove(i - 1);
/* 285 */             melAnalResult.add(i - 1, me3);
/* 286 */             i--;
/*     */           }
/*     */         }
/*     */         else
/*     */         {
/* 291 */           me3 = me1.derive(me2);
/* 292 */           if (me3.isOneEojeol()) {
/* 293 */             melAnalResult.remove(i - 1);
/* 294 */             melAnalResult.remove(i - 1);
/* 295 */             melAnalResult.add(i - 1, me3);
/* 296 */             i--;
/*     */           }
/*     */         }
/*     */ 
/*     */       }
/*     */ 
/*     */     }
/*     */ 
/* 304 */     me1 = (MExpression)melAnalResult.get(0);
/* 305 */     int i = 0; for (int size = 0; (i < (size = me1.size())) && (size > 1); i++) {
/* 306 */       MCandidate mc = (MCandidate)me1.get(i);
/* 307 */       if (((mc.cclEnc != Condition.ENG) && (mc.cclEnc != 0L)) || 
/* 308 */         (mc.firstMorp.isTagOf(POSTag.J | POSTag.E | POSTag.XS)))
/*     */       {
/* 310 */         me1.remove(i);
/* 311 */         i--;
/*     */       }
/*     */     }
/*     */ 
/* 315 */     setBestPrevMC(melAnalResult);
/*     */ 
/* 317 */     return melAnalResult;
/*     */   }
/*     */ 
/*     */   private void setBestPrevMC(List<MExpression> meList)
/*     */   {
/* 332 */     MExpression mePrev = null; MExpression meCurr = null;
/* 333 */     int i = 0; for (int size = meList.size(); i < size; i++) {
/* 334 */       meCurr = (MExpression)meList.get(i);
/* 335 */       meCurr.setBestPrevMC(mePrev);
/* 336 */       mePrev = meCurr;
/*     */     }
/*     */ 
/* 339 */     int idx = meList.size() - 1;
/* 340 */     MExpression me = (MExpression)meList.get(idx);
/* 341 */     me.sortByBestLnpr();
/* 342 */     MCandidate mc = (MCandidate)me.get(0);
/* 343 */     for (idx--; (mc != null) && (idx >= 0); idx--) {
/* 344 */       mc = mc.prevBestMC;
/* 345 */       me = (MExpression)meList.get(idx);
/* 346 */       me.remove(mc);
/* 347 */       me.add(0, mc);
/*     */     }
/*     */   }
/*     */ 
/*     */   public List<MExpression> leaveJustBest(List<MExpression> meList)
/*     */     throws Exception
/*     */   {
/*     */     MCandidate mc;
/* 365 */     for (int i = 0; i < meList.size(); i++) {
/* 366 */       MExpression me = (MExpression)meList.get(i);
/* 367 */       mc = (MCandidate)me.get(0);
/* 368 */       me.clear();
/* 369 */       me.add(mc);
/*     */     }
/*     */ 
/* 372 */     List tempMEList = new ArrayList();
/* 373 */     for (MExpression me : meList) {
/* 374 */       tempMEList.addAll(me.split());
/*     */     }
/*     */ 
/* 377 */     meList.clear();
/* 378 */     meList.addAll(tempMEList);
/*     */ 
/* 380 */     return meList;
/*     */   }
/*     */ 
/*     */   public List<Sentence> divideToSentences(List<MExpression> melAnalResult)
/*     */     throws Exception
/*     */   {
/* 397 */     List ret = new ArrayList();
/*     */ 
/* 400 */     MExpression me1 = null;
/*     */ 
/* 403 */     Eojeol eojeol = null; Eojeol prevEojeol = null;
/* 404 */     Sentence sentence = null;
/* 405 */     for (int i = 0; i < melAnalResult.size(); i++) {
/* 406 */       if (sentence == null) {
/* 407 */         sentence = new Sentence();
/*     */       }
/* 409 */       me1 = (MExpression)melAnalResult.get(i);
/*     */ 
/* 411 */       if ((prevEojeol != null) && (((MCandidate)me1.get(0)).isTagOf(POSTag.S)) && 
/* 412 */         (prevEojeol.getStartIndex() + prevEojeol.exp.length() == ((MCandidate)me1.get(0)).firstMorp.index))
/*     */       {
/* 415 */         eojeol.addAll((Collection)me1.get(0));
/* 416 */         eojeol.exp += me1.exp;
/*     */       } else {
/* 418 */         eojeol = new Eojeol(me1);
/* 419 */         sentence.add(eojeol);
/* 420 */         prevEojeol = eojeol;
/*     */       }
/*     */ 
/* 423 */       if (eojeol.isEnding()) {
/* 424 */         if (i < melAnalResult.size() - 1) {
/* 425 */           while (i < melAnalResult.size() - 1) {
/* 426 */             me1 = (MExpression)melAnalResult.get(i + 1);
/* 427 */             if ((!me1.getExp().startsWith(".")) && 
/* 428 */               (!me1.getExp().startsWith(",")) && 
/* 429 */               (!me1.getExp().startsWith("!")) && 
/* 430 */               (!me1.getExp().startsWith("?")) && 
/* 431 */               (!me1.getExp().startsWith(";")) && 
/* 432 */               (!me1.getExp().startsWith("~")) && 
/* 433 */               (!me1.getExp().startsWith(")")) && 
/* 434 */               (!me1.getExp().startsWith("]")) && 
/* 435 */               (!me1.getExp().startsWith("}"))) {
/*     */               break;
/*     */             }
/* 438 */             if (eojeol.firstMorp.index + eojeol.exp.length() == ((MCandidate)me1.get(0)).firstMorp.index)
/*     */             {
/* 440 */               eojeol.addAll((Collection)me1.get(0));
/* 441 */               eojeol.exp += me1.exp;
/*     */             }
/*     */             else
/*     */             {
/* 445 */               sentence.add(new Eojeol(me1));
/*     */             }
/* 447 */             i++;
/*     */           }
/*     */ 
/*     */         }
/*     */ 
/* 453 */         ret.add(sentence);
/* 454 */         sentence = null;
/* 455 */         prevEojeol = null;
/*     */       }
/*     */ 
/*     */     }
/*     */ 
/* 460 */     if ((sentence != null) && (sentence.size() > 0)) {
/* 461 */       ret.add(sentence);
/*     */     }
/*     */ 
/* 464 */     return ret;
/*     */   }
/*     */ 
/*     */   public void createLogger(String fileName)
/*     */   {
/*     */     try
/*     */     {
/* 482 */       System.out.println("DO LOGGING!!");
/* 483 */       if (fileName == null) this.logger = new PrintWriter(System.out, true); else
/* 484 */         this.logger = new PrintWriter(new FileWriter(fileName), true);
/* 485 */       this.doLogging = true;
/*     */     } catch (IOException e) {
/* 487 */       e.printStackTrace();
/*     */     }
/*     */   }
/*     */ 
/*     */   public void closeLogger()
/*     */   {
/* 501 */     if ((this.doLogging) && (this.logger != null)) this.logger.close();
/* 502 */     this.doLogging = false;
/*     */   }
/*     */ 
/*     */   private void writeLog(Object obj)
/*     */   {
/* 516 */     if (DEBUG)
/* 517 */       if (this.logger != null)
/* 518 */         this.logger.println(obj);
/*     */       else
/* 520 */         System.out.println(obj);
/*     */   }
/*     */ }

/* Location:           /Users/blueskywalker/Source/OpenSource/korean/org.snu.ids.ha.jar
 * Qualified Name:     org.snu.ids.ha.ma.MorphemeAnalyzer
 * JD-Core Version:    0.6.1
 */