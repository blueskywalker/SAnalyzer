/*     */ package org.snu.ids.ha.index;
/*     */ 
/*     */ import java.io.PrintStream;
/*     */ import java.util.ArrayList;
/*     */ import java.util.Collections;
/*     */ import java.util.Comparator;
/*     */ import java.util.List;
/*     */ import javax.swing.JLabel;
/*     */ import javax.swing.JProgressBar;
/*     */ import org.snu.ids.ha.constants.POSTag;
/*     */ import org.snu.ids.ha.dic.Dictionary;
/*     */ import org.snu.ids.ha.ma.CharSetType;
/*     */ import org.snu.ids.ha.ma.MCandidate;
/*     */ import org.snu.ids.ha.ma.MExpression;
/*     */ import org.snu.ids.ha.ma.Morpheme;
/*     */ import org.snu.ids.ha.ma.MorphemeAnalyzer;
/*     */ import org.snu.ids.ha.ma.Token;
/*     */ import org.snu.ids.ha.ma.Tokenizer;
/*     */ import org.snu.ids.ha.util.StringSet;
/*     */ import org.snu.ids.ha.util.Util;
/*     */ import org.tartarus.snowball.EnglishStemmer;
/*     */ 
/*     */ public class KeywordExtractor extends MorphemeAnalyzer
/*     */ {
/*  50 */   static WordDic UOMDic = new WordDic("/dic/ecat/UOM.dic");
/*  51 */   static WordDic ChemFormulaDic = new WordDic("/dic/ecat/ChemFormula.dic");
/*  52 */   static WordDic CompNounDic = new WordDic("/dic/ecat/CompNoun.dic");
/*  53 */   static WordDic VerbNounDic = new WordDic("/dic/ecat/VerbNoun.dic");
/*  54 */   static WordDic JunkWordDic = new WordDic("/dic/ecat/JunkWord.dic");
/*  55 */   static WordDic VerbJunkWordDic = new WordDic("/dic/ecat/VerbJunkWord.dic");
/*     */   static final int MAX_UOM_SIZE = 7;
/* 421 */   public static final StringSet MULTIPLYERS = new StringSet(new String[] { "*", "x", "X", "×", "Ⅹ" });
/* 422 */   public static final StringSet RANGE_INDICATOR = new StringSet(new String[] { "-", "±", "~", "+" });
/*     */   public static final String STD_UOM_CONNECTOR = "*";
/*     */ 
/*     */   public KeywordList extractKeyword(JProgressBar progressBar, JLabel label, String string, boolean onlyNoun)
/*     */   {
/*  61 */     KeywordList ret = null;
/*     */ 
/*  63 */     String line = null;
/*  64 */     int offset = 0;
/*     */ 
/*  66 */     String[] strArr = string.split("\n");
/*     */ 
/*  68 */     if (progressBar != null) {
/*  69 */       progressBar.setIndeterminate(false);
/*  70 */       progressBar.setMaximum(strArr.length);
/*  71 */       progressBar.setStringPainted(true);
/*  72 */       label.setText("0");
/*     */     }
/*     */ 
/*  75 */     int lineNo = 0; for (int len = strArr.length; lineNo < len; lineNo++) {
/*  76 */       line = strArr[lineNo];
/*  77 */       if (Util.valid(line)) {
/*  78 */         KeywordList keywordList = extractKeyword(line, onlyNoun);
/*     */ 
/*  80 */         if (offset > 0) {
/*  81 */           int i = 0; for (int size = keywordList.size(); i < size; i++) {
/*  82 */             Keyword keyword = (Keyword)keywordList.get(i);
/*  83 */             keyword.setIndex(offset + keyword.getIndex());
/*     */           }
/*     */ 
/*     */         }
/*     */ 
/*  88 */         if ((keywordList != null) && (keywordList.size() > 0)) {
/*  89 */           if (ret == null)
/*  90 */             ret = new KeywordList(keywordList);
/*     */           else {
/*  92 */             ret.addAll(keywordList);
/*     */           }
/*     */         }
/*     */       }
/*  96 */       if (progressBar != null) {
/*  97 */         progressBar.setValue(lineNo + 1);
/*  98 */         label.setText(lineNo + 1);
/*     */       }
/* 100 */       offset += line.length() + 1;
/*     */     }
/* 102 */     if (progressBar != null) {
/* 103 */       progressBar.setStringPainted(false);
/*     */     }
/*     */ 
/* 106 */     return ret;
/*     */   }
/*     */ 
/*     */   public KeywordList extractKeyword(String string, boolean onlyNoun)
/*     */   {
/* 123 */     List ret = new ArrayList();
/* 124 */     EnglishStemmer engStemmer = new EnglishStemmer();
/*     */     try
/*     */     {
/* 127 */       List meList = leaveJustBest(postProcess(analyze(string)));
/*     */ 
/* 129 */       Morpheme mp = null;
/* 130 */       MCandidate mc = null;
/* 131 */       MExpression me = null;
/* 132 */       Keyword keyword = null;
/* 133 */       List mpList = new ArrayList();
/* 134 */       int i = 0; for (int size = meList == null ? 0 : meList.size(); i < size; i++) {
/* 135 */         me = (MExpression)meList.get(i);
/* 136 */         mc = (MCandidate)me.get(0);
/*     */ 
/* 138 */         int jSize = mc.size();
/* 139 */         if (jSize == 1) {
/* 140 */           mp = (Morpheme)mc.get(0);
/* 141 */           mp.setString(me.getExp());
/* 142 */           mpList.add(mp);
/*     */         }
/*     */         else {
/* 145 */           for (int j = 0; j < jSize; j++) {
/* 146 */             mpList.add((Morpheme)mc.get(j));
/*     */           }
/*     */         }
/*     */ 
/*     */       }
/*     */ 
/* 152 */       for (int endIdx = mpList.size() - 1; endIdx > 0; endIdx--) {
/* 153 */         for (int startIdx = Math.max(endIdx - 7, 0); startIdx < endIdx; startIdx++) {
/* 154 */           String tempName = "";
/* 155 */           for (int i = startIdx; i <= endIdx; i++) {
/* 156 */             tempName = tempName + ((Morpheme)mpList.get(i)).getString();
/*     */           }
/*     */ 
/* 160 */           if (UOMDic.contains(tempName)) {
/* 161 */             for (; startIdx < endIdx; endIdx--) {
/* 162 */               mpList.remove(startIdx + 1);
/*     */             }
/* 164 */             mp = (Morpheme)mpList.get(startIdx);
/* 165 */             mp.setString(tempName);
/* 166 */             mp.setCharSet(CharSetType.COMBINED);
/* 167 */             mp.setTag(POSTag.NNM);
/*     */           }
/* 170 */           else if (ChemFormulaDic.contains(tempName)) {
/* 171 */             for (; startIdx < endIdx; endIdx--) {
/* 172 */               mpList.remove(startIdx + 1);
/*     */             }
/* 174 */             mp = (Morpheme)mpList.get(startIdx);
/* 175 */             mp.setString(tempName);
/* 176 */             mp.setCharSet(CharSetType.COMBINED);
/* 177 */             mp.setTag(POSTag.UN);
/*     */           }
/* 180 */           else if (CompNounDic.contains(tempName)) {
/* 181 */             for (; startIdx < endIdx; endIdx--) {
/* 182 */               mpList.remove(startIdx + 1);
/*     */             }
/* 184 */             if (!JunkWordDic.contains(tempName)) {
/* 185 */               mp = (Morpheme)mpList.get(startIdx);
/* 186 */               mp.setString(tempName);
/* 187 */               mp.setCharSet(CharSetType.COMBINED);
/* 188 */               mp.setTag(POSTag.NNG);
/* 189 */               mp.setComposed(true);
/*     */             }
/*     */           }
/*     */         }
/*     */ 
/*     */       }
/*     */ 
/* 196 */       int i = 0; for (int size = mpList.size(); i < size; i++) {
/* 197 */         mp = (Morpheme)mpList.get(i);
/* 198 */         mp.setString(mp.getString().toLowerCase());
/*     */ 
/* 201 */         if (((!onlyNoun) || (mp.isTagOf(POSTag.N))) && 
/* 202 */           (!JunkWordDic.contains(mp.getString())))
/*     */         {
/* 206 */           if ((mp.isTagOf(POSTag.UN)) && 
/* 207 */             (mp.getCharSet() == CharSetType.ENGLISH))
/*     */           {
/* 209 */             keyword = new Keyword(mp);
/* 210 */             engStemmer.setCurrent(keyword.getString().toLowerCase());
/* 211 */             engStemmer.stem();
/* 212 */             keyword.setString(engStemmer.getCurrent());
/* 213 */             ret.add(keyword);
/*     */           }
/* 216 */           else if (mp.isTagOf(POSTag.V)) {
/* 217 */             String temp = mp.getString();
/* 218 */             int tempLen = temp.length();
/* 219 */             char ch = temp.charAt(tempLen - 1);
/* 220 */             if ((tempLen > 2) && ((ch == 54616) || (ch == 46104)) && 
/* 221 */               (VerbNounDic.contains(temp = temp.substring(0, tempLen - 1))))
/*     */             {
/* 223 */               keyword = new Keyword(mp);
/* 224 */               keyword.setString(temp);
/* 225 */               keyword.setTag(POSTag.NNG);
/* 226 */               ret.add(keyword);
/*     */             }
/*     */             else
/*     */             {
/* 230 */               keyword = new Keyword(mp);
/* 231 */               ret.add(keyword);
/*     */             }
/*     */           }
/*     */           else {
/* 235 */             mp.isTagOf(POSTag.NP);
/* 236 */             keyword = new Keyword(mp);
/* 237 */             ret.add(keyword);
/*     */           }
/*     */         }
/*     */       }
/*     */ 
/* 242 */       Morpheme mp0 = null; Morpheme mp1 = null; Morpheme mp2 = null; Morpheme mp3 = null;
/* 243 */       int i = 0; int size = mpList.size(); for (int step = 0; i < size; i++) {
/* 244 */         mp0 = (Morpheme)mpList.get(i);
/* 245 */         step = 0;
/*     */ 
/* 249 */         if ((i + 1 < size) && 
/* 250 */           (mp0.isTagOf(POSTag.NN)) && 
/* 251 */           ((mp1 = (Morpheme)mpList.get(i + 1)).isTagOf(POSTag.NN)) && 
/* 252 */           (mp0.getIndex() + mp0.getString().length() == mp1.getIndex()))
/*     */         {
/* 255 */           if ((i + 2 < size) && 
/* 256 */             ((mp2 = (Morpheme)mpList.get(i + 2)).isTagOf(POSTag.NN)) && 
/* 257 */             (mp1.getIndex() + mp1.getString().length() == mp2.getIndex()))
/*     */           {
/* 260 */             if ((i + 3 < size) && 
/* 261 */               ((mp3 = (Morpheme)mpList.get(i + 3)).isTagOf(POSTag.NN)) && 
/* 262 */               (mp2.getIndex() + mp2.getString().length() == mp3.getIndex()))
/*     */             {
/* 264 */               keyword = new Keyword(mp0);
/* 265 */               keyword.setComposed(true);
/* 266 */               keyword.setString(mp0.getString() + mp1.getString() + mp2.getString() + mp3.getString());
/* 267 */               ret.add(keyword);
/* 268 */               step++;
/*     */             } else {
/* 270 */               keyword = new Keyword(mp0);
/* 271 */               keyword.setComposed(true);
/* 272 */               keyword.setString(mp0.getString() + mp1.getString() + mp2.getString());
/* 273 */               ret.add(keyword);
/*     */             }
/* 275 */             step++;
/*     */           } else {
/* 277 */             keyword = new Keyword(mp0);
/* 278 */             keyword.setComposed(true);
/* 279 */             keyword.setString(mp0.getString() + mp1.getString());
/* 280 */             ret.add(keyword);
/*     */           }
/* 282 */           step++;
/*     */         }
/* 284 */         i += step;
/*     */       }
/*     */ 
/* 289 */       for (int i = 0; i < ret.size(); i++) {
/* 290 */         keyword = (Keyword)ret.get(i);
/*     */ 
/* 293 */         if ((keyword.isTagOf(POSTag.XP | POSTag.XS | POSTag.VX)) || (JunkWordDic.contains(mp.getString()))) {
/* 294 */           ret.remove(i);
/* 295 */           i--;
/*     */         }
/*     */ 
/*     */       }
/*     */ 
/* 300 */       List cnKeywordList = new ArrayList();
/* 301 */       String[] cnKeywords = (String[])null;
/* 302 */       int i = 0; for (int size = ret.size(); i < size; i++) {
/* 303 */         Keyword k = (Keyword)ret.get(i);
/* 304 */         if ((k.isComposed()) && ((cnKeywords = this.dic.getCompNoun(k.getString())) != null)) {
/* 305 */           int addIdx = 0;
/* 306 */           int j = 0; for (int len = cnKeywords.length; j < len; j++)
/* 307 */             if (!JunkWordDic.contains(cnKeywords[j])) {
/* 308 */               Keyword newKeyword = new Keyword(k);
/* 309 */               newKeyword.setVocTag("E");
/* 310 */               newKeyword.setString(cnKeywords[j]);
/* 311 */               newKeyword.setComposed(false);
/* 312 */               newKeyword.setIndex(k.getIndex() + addIdx);
/* 313 */               addIdx += newKeyword.getString().length();
/* 314 */               cnKeywordList.add(newKeyword);
/*     */             }
/*     */         }
/*     */       }
/* 318 */       ret.addAll(cnKeywordList);
/*     */ 
/* 321 */       Collections.sort(ret, new Comparator()
/*     */       {
/*     */         public int compare(Keyword o1, Keyword o2)
/*     */         {
/* 325 */           if (o1.getIndex() == o2.getIndex()) {
/* 326 */             return o1.getString().length() - o2.getString().length();
/*     */           }
/* 328 */           return o1.getIndex() - o2.getIndex();
/*     */         }
/*     */       });
/*     */     }
/*     */     catch (Exception e) {
/* 333 */       System.err.println(string);
/* 334 */       e.printStackTrace();
/*     */     }
/*     */ 
/* 337 */     return new KeywordList(ret);
/*     */   }
/*     */ 
/*     */   public KeywordList removeJunkWord(KeywordList keywordList)
/*     */   {
/* 343 */     int i = 0; for (int size = keywordList == null ? 0 : keywordList.size(); i < size; i++);
/* 346 */     return keywordList;
/*     */   }
/*     */ 
/*     */   public Keyword getCompositeNoun(MCandidate mc)
/*     */   {
/* 361 */     Keyword ret = null;
/* 362 */     if ((mc == null) || (mc.size() < 2)) return null;
/*     */ 
/* 364 */     int nnCnt = 0;
/* 365 */     for (int i = 0; i < mc.size(); i++) {
/* 366 */       Morpheme mp = (Morpheme)mc.get(i);
/* 367 */       if (mp.isTagOf(POSTag.NN)) {
/* 368 */         if (ret == null) {
/* 369 */           ret = new Keyword(mp);
/* 370 */           ret.setComposed(true);
/* 371 */           nnCnt++; } else {
/* 372 */           if (nnCnt == 0) {
/* 373 */             return null;
/*     */           }
/* 375 */           ret.setString(ret.getString() + mp.getString());
/* 376 */           nnCnt++;
/*     */         }
/*     */       } else { if ((ret != null) && (nnCnt > 1)) {
/* 379 */           return ret;
/*     */         }
/* 381 */         nnCnt = 0;
/*     */       }
/*     */     }
/* 384 */     if (nnCnt == 0) return null;
/* 385 */     return ret;
/*     */   }
/*     */ 
/*     */   public static String getFormatedUOMValues(String inputString)
/*     */   {
/* 402 */     String resultString = "";
/* 403 */     List list = Tokenizer.tokenize(inputString);
/* 404 */     Token token = null;
/*     */ 
/* 406 */     for (int i = 0; i < list.size(); i++) {
/* 407 */       token = (Token)list.get(i);
/* 408 */       if (token.isCharSetOf(CharSetType.NUMBER))
/* 409 */         resultString = resultString + token.getString();
/* 410 */       else if (isUOMConnector(token.getString()))
/* 411 */         resultString = resultString + "*";
/* 412 */       else if ((!token.getString().equals(" ")) && (!token.getString().equals("\t"))) {
/* 413 */         resultString = resultString + token.getString();
/*     */       }
/*     */     }
/*     */ 
/* 417 */     return resultString;
/*     */   }
/*     */ 
/*     */   private static boolean isUOMConnector(String uomCon)
/*     */   {
/* 431 */     return MULTIPLYERS.contains(uomCon);
/*     */   }
/*     */ 
/*     */   private static boolean isUOMConnector2(String uomCon)
/*     */   {
/* 438 */     return (MULTIPLYERS.contains(uomCon)) || (RANGE_INDICATOR.contains(uomCon));
/*     */   }
/*     */ 
/*     */   public static void main(String[] args)
/*     */   {
/* 452 */     String string = "문서 엔터티의 개념이 명확하지 못하다. 즉, 문서 엔터티에 저장되는 단위개체인 문서가 다른 부서로 발신을 하면 다른 문서가 되는 것인지 수정을 할 때는 문서가 새로 생성되지 않는 것인지, 혹은 결재선으로 발신하면 문서가 그대로 있는 것인지 등에 대한 명확한 정의가 없다. 개발 담당자 마저도 이러한 개념을 명확히 설명하지 못하고 있다.";
/* 453 */     string = string + "\n사용노즐 : Variojet 045\n작동압력 : 10∼135 bar\n최대압력 : 150 bar\n물토출량 : 1400 rpm 11 L/min\n물흡입허용최고온도 : 70 ℃\n최대물흡입높이 : 2.5 m\n소비전력(시작) : 3.1 kW\n소비전력(정상작동) : 2.3 kW\n크기 : 350×330×900 mm\n무게 : 32 kg\n세제흡입가능 HClO4 ClO4 KClO4 CH3OC6H4OH H2(SO4)2";
/*     */ 
/* 455 */     KeywordExtractor ke = new KeywordExtractor();
/*     */ 
/* 457 */     Keyword keyword = null;
/* 458 */     List ret = ke.extractKeyword(string, false);
/* 459 */     int size = ret == null ? 0 : ret.size();
/* 460 */     for (int i = 0; i < size; i++) {
/* 461 */       keyword = (Keyword)ret.get(i);
/* 462 */       System.out.println(i + "\t" + keyword);
/*     */     }
/*     */   }
/*     */ }

/* Location:           /Users/blueskywalker/Source/OpenSource/korean/org.snu.ids.ha.jar
 * Qualified Name:     org.snu.ids.ha.index.KeywordExtractor
 * JD-Core Version:    0.6.1
 */